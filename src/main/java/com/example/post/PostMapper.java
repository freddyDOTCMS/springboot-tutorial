package com.example.post;


import com.example.author.Author;
import com.example.author.AuthorMapper;
import com.example.author.AuthorNotFoundException;
import com.example.author.AuthorRepository;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.springframework.beans.factory.annotation.Autowired;


/**
 * Mapper interface for converting between Post entities and DTOs using MapStruct.
 * 
 * <p>This interface demonstrates advanced MapStruct mapping patterns in Spring Boot applications:</p>
 * <ul>
 *   <li><strong>@Mapper(componentModel = "spring", uses = {AuthorMapper.class})</strong>: This annotation tells MapStruct
 *       to generate a Spring component and also use the AuthorMapper for mapping author-related fields. The "uses" parameter
 *       allows one mapper to delegate to another mapper for complex nested mappings.</li>
 *   <li><strong>Interface approach</strong>: MapStruct generates the implementation of this interface at compile time,
 *       providing type-safe mapping between objects.</li>
 *   <li><strong>Multi-parameter mapping</strong>: Demonstrates how to map from multiple source objects to a single target.</li>
 *   <li><strong>Component dependencies</strong>: Shows how mappers can depend on other mappers for nested object conversion.</li>
 * </ul>
 * 
 * <p>Key features demonstrated:</p>
 * <ul>
 *   <li><strong>Spring Integration</strong>: Generated implementation is automatically detected by Spring's component scanning</li>
 *   <li><strong>Nested Mapping</strong>: Uses AuthorMapper to handle author-related field mappings</li>
 *   <li><strong>Field Exclusion</strong>: Ignores ID field during entity creation</li>
 *   <li><strong>Multi-source Mapping</strong>: Maps from both CreatePostRequest and Author to Post entity</li>
 *   <li><strong>Bidirectional Mapping</strong>: Provides methods to convert from DTOs to entities and vice versa</li>
 * </ul>
 * 
 * <p>This mapper handles the transformation between:</p>
 * <ul>
 *   <li><strong>CreatePostRequest + Author</strong>: Input DTOs for creating posts</li>
 *   <li><strong>Post</strong>: JPA entity for database persistence</li>
 *   <li><strong>PostResponse</strong>: Output DTO for API responses</li>
 * </ul>
 * 
 * <p>The mapper ensures clean separation between the API layer (DTOs) and the domain layer (entities),
 * following the Data Transfer Object pattern while handling complex relationships.</p>
 * 
 * @author Tutorial Application
 * @version 1.0
 * @since Spring Boot 3.x
 * @see Post
 * @see CreatePostRequest
 * @see PostResponse
 * @see AuthorMapper
 */
@Mapper(componentModel = "spring", uses = {AuthorMapper.class})
public interface  PostMapper {

    /**
     * Converts a CreatePostRequest DTO and Author entity to a Post entity.
     * 
     * <p>This method demonstrates MapStruct mapping with multiple source parameters:</p>
     * <ul>
     *   <li><strong>@Mapping(target = "author", source = "author")</strong>: Explicitly maps the author parameter
     *       to the author field of the Post entity. This is necessary when you have multiple source parameters.</li>
     *   <li><strong>@Mapping(target = "id", ignore = true)</strong>: Tells MapStruct to ignore the id field
     *       during mapping. This is necessary because the id is generated by the database and should not
     *       be set from the request DTO.</li>
     *   <li><strong>Multi-parameter mapping</strong>: Takes both CreatePostRequest and Author as parameters,
     *       combining data from both sources to create the Post entity.</li>
     * </ul>
     * 
     * <p>This method is used when creating new posts, where:</p>
     * <ul>
     *   <li>The post data comes from the CreatePostRequest DTO</li>
     *   <li>The author reference comes from the Author entity (retrieved by the service layer)</li>
     *   <li>The ID should be generated by the database</li>
     * </ul>
     * 
     * <p>MapStruct will automatically map fields with the same names from the CreatePostRequest
     * (title, content, excerpt) to the Post entity.</p>
     * 
     * @param request The CreatePostRequest DTO containing post data
     * @param author The Author entity that will be associated with the post
     * @return A Post entity with the data from both sources (excluding ID)
     */
    @Mapping(target = "author", source = "author")
    @Mapping(target = "id", ignore = true)
    Post toEntity(CreatePostRequest request, Author author);

    /**
     * Converts a Post entity to a PostResponse DTO.
     * 
     * <p>This method demonstrates simple entity-to-DTO mapping:</p>
     * <ul>
     *   <li><strong>Automatic field mapping</strong>: MapStruct automatically maps fields with the same names
     *       (id, title, content, excerpt) from the entity to the response DTO.</li>
     *   <li><strong>Nested mapping</strong>: Uses the AuthorMapper (specified in the @Mapper uses parameter)
     *       to convert the Author entity to an AuthorResponse DTO.</li>
     *   <li><strong>Type safety</strong>: Compile-time checking ensures all required fields are mapped.</li>
     * </ul>
     * 
     * <p>This method is used when returning post data to clients, providing a clean
     * API response that includes both post and author information.</p>
     * 
     * @param post The Post entity to convert
     * @return A PostResponse DTO with the entity data
     */
    PostResponse toDto(Post post);
}
