package com.example.post.comment;


import com.example.post.Post;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

/**
 * Mapper class for converting between Comment entities and DTOs using MapStruct.
 * 
 * <p>This class demonstrates MapStruct mapping patterns for comment entities with relationships:</p>
 * <ul>
 *   <li><strong>@Mapper(componentModel = "spring")</strong>: This annotation tells MapStruct to generate
 *       a Spring component that can be injected into other components. The generated implementation
 *       will be automatically detected by Spring's component scanning.</li>
 *   <li><strong>Abstract class approach</strong>: MapStruct generates the implementation of this abstract class
 *       at compile time, providing type-safe mapping between objects.</li>
 *   <li><strong>Multi-parameter mapping</strong>: Demonstrates how to map from multiple source objects to a single target.</li>
 *   <li><strong>Relationship handling</strong>: Shows how to handle entity relationships during mapping.</li>
 * </ul>
 * 
 * <p>Key features demonstrated:</p>
 * <ul>
 *   <li><strong>Spring Integration</strong>: Generated implementation is automatically detected by Spring's component scanning</li>
 *   <li><strong>Multi-source mapping</strong>: Maps from both CreateCommentRequest and Post to Comment entity</li>
 *   <li><strong>Field exclusion</strong>: Ignores ID field during entity creation</li>
 *   <li><strong>Relationship mapping</strong>: Properly handles the post relationship</li>
 *   <li><strong>Bidirectional mapping</strong>: Provides methods to convert from DTOs to entities and vice versa</li>
 * </ul>
 * 
 * <p>This mapper handles the transformation between:</p>
 * <ul>
 *   <li><strong>CreateCommentRequest + Post</strong>: Input DTOs for creating comments</li>
 *   <li><strong>Comment</strong>: JPA entity for database persistence</li>
 *   <li><strong>CommentResponse</strong>: Output DTO for API responses</li>
 * </ul>
 * 
 * <p>The mapper ensures clean separation between the API layer (DTOs) and the domain layer (entities),
 * following the Data Transfer Object pattern while handling complex relationships.</p>
 * 
 * @author Tutorial Application
 * @version 1.0
 * @since Spring Boot 3.x
 * @see Comment
 * @see CreateCommentRequest
 * @see CommentResponse
 * @see Post
 */
@Mapper(componentModel = "spring")
public abstract class CommentMapper {

    /**
     * Converts a CreateCommentRequest DTO and Post entity to a Comment entity.
     * 
     * <p>This method demonstrates MapStruct mapping with multiple source parameters:</p>
     * <ul>
     *   <li><strong>@Mapping(target = "post", source = "post")</strong>: Explicitly maps the post parameter
     *       to the post field of the Comment entity. This is necessary when you have multiple source parameters.</li>
     *   <li><strong>@Mapping(target = "id", ignore = true)</strong>: Tells MapStruct to ignore the id field
     *       during mapping. This is necessary because the id is generated by the database and should not
     *       be set from the request DTO.</li>
     *   <li><strong>Multi-parameter mapping</strong>: Takes both CreateCommentRequest and Post as parameters,
     *       combining data from both sources to create the Comment entity.</li>
     * </ul>
     * 
     * <p>This method is used when creating new comments, where:</p>
     * <ul>
     *   <li>The comment data comes from the CreateCommentRequest DTO</li>
     *   <li>The post reference comes from the Post entity (retrieved by the service layer)</li>
     *   <li>The ID should be generated by the database</li>
     * </ul>
     * 
     * <p>MapStruct will automatically map fields with the same names from the CreateCommentRequest
     * (text) to the Comment entity.</p>
     * 
     * @param request The CreateCommentRequest DTO containing comment data
     * @param post The Post entity that will be associated with the comment
     * @return A Comment entity with the data from both sources (excluding ID)
     */
    @Mapping(target = "post", source = "post")
    @Mapping(target = "id", ignore = true)
    public abstract Comment toEntity(CreateCommentRequest request, Post post);

    /**
     * Converts a Comment entity to a CommentResponse DTO.
     * 
     * <p>This method demonstrates simple entity-to-DTO mapping:</p>
     * <ul>
     *   <li><strong>Automatic field mapping</strong>: MapStruct automatically maps fields with the same names
     *       (id, text) from the entity to the response DTO.</li>
     *   <li><strong>Type safety</strong>: Compile-time checking ensures all required fields are mapped.</li>
     *   <li><strong>Clean API</strong>: Provides a simplified view of the comment data.</li>
     * </ul>
     * 
     * <p>This method is used when returning comment data to clients, providing a clean
     * API response that includes essential comment information.</p>
     * 
     * <p>Note: The post relationship is not included in the CommentResponse to avoid
     * circular references and keep the API response clean. The post information is
     * available through the parent post's detailed response.</p>
     * 
     * @param comment The Comment entity to convert
     * @return A CommentResponse DTO with the entity data
     */
    public abstract CommentResponse toDto(Comment comment);

}
