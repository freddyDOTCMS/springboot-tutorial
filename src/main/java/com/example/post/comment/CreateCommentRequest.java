package com.example.post.comment;

/**
 * Data Transfer Object (DTO) for creating new comments.
 * 
 * <p>This class demonstrates the DTO pattern for simple entity creation:</p>
 * <ul>
 *   <li><strong>Input DTO</strong>: This class represents the data structure for creating new comments.
 *       It contains only the fields that are needed for the creation operation.</li>
 *   <li><strong>JSON Deserialization</strong>: When a POST request is made to create a comment, Spring
 *       will automatically deserialize the JSON request body into an instance of this class.</li>
 *   <li><strong>Validation boundary</strong>: This class can be used as a boundary for input validation,
 *       ensuring that only valid data reaches the service layer.</li>
 *   <li><strong>Simple structure</strong>: Contains only the essential field needed for comment creation.</li>
 * </ul>
 * 
 * <p>Key characteristics of this DTO:</p>
 * <ul>
 *   <li><strong>No ID field</strong>: The ID is generated by the database, so it's not included in the request</li>
 *   <li><strong>No post reference</strong>: The post is specified in the URL path, not in the request body</li>
 *   <li><strong>JavaBean convention</strong>: Follows the JavaBean pattern with private fields and public getters/setters</li>
 *   <li><strong>Minimal data</strong>: Contains only the text content needed for comment creation</li>
 *   <li><strong>API contract</strong>: Defines the expected structure of JSON requests for creating comments</li>
 * </ul>
 * 
 * <p>Example JSON request body:</p>
 * <pre>
 * {
 *   "text": "This is a great post! Thanks for sharing your thoughts."
 * }
 * </pre>
 * 
 * <p>This DTO is used in the CommentController's createComment method and is converted to a Comment entity
 * by the CommentMapper after the post is validated and retrieved by the service layer.</p>
 * 
 * <p>The design demonstrates proper separation of concerns where:</p>
 * <ul>
 *   <li>The DTO contains only the data needed for creation</li>
 *   <li>The post relationship is handled through the URL path</li>
 *   <li>The service layer handles post validation and retrieval</li>
 *   <li>The mapper handles the conversion to the entity</li>
 * </ul>
 * 
 * @author Tutorial Application
 * @version 1.0
 * @since Spring Boot 3.x
 * @see CommentController#createComment(long, CreateCommentRequest)
 * @see CommentMapper#toEntity(CreateCommentRequest, Post)
 * @see CommentService#save(CreateCommentRequest, long)
 */
public class CreateCommentRequest {
    
    /**
     * The text content of the comment to be created.
     * 
     * <p>This field will be automatically populated from the JSON request body
     * when Spring deserializes the HTTP request. The text can contain multiple
     * sentences and paragraphs.</p>
     */
    private String text;

    /**
     * Gets the text content of the comment.
     * 
     * @return The comment's text content
     */
    public String getText() {
        return text;
    }

    /**
     * Sets the text content of the comment.
     * 
     * <p>This setter is called by Spring during JSON deserialization to populate
     * the field from the request body.</p>
     * 
     * @param text The comment's text content
     */
    public void setText(String text) {
        this.text = text;
    }

}
