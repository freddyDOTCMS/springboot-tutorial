package com.example.post.comment;

import com.example.post.Post;
import jakarta.persistence.*;

/**
 * JPA entity class representing a Comment in the tutorial application.
 * 
 * <p>This class demonstrates the "many" side of a one-to-many relationship with Post entities:</p>
 * <ul>
 *   <li><strong>@Entity</strong>: Marks this class as a JPA entity that will be mapped to a database table.</li>
 *   <li><strong>@ManyToOne</strong>: Establishes a many-to-one relationship with Post entities, meaning
 *       many comments can belong to one post.</li>
 *   <li><strong>@JoinColumn</strong>: Specifies the foreign key column that references the post table.</li>
 *   <li><strong>FetchType.LAZY</strong>: Demonstrates lazy loading for performance optimization.</li>
 * </ul>
 * 
 * <p>This entity demonstrates JPA relationship patterns:</p>
 * <ul>
 *   <li><strong>Many-to-One with Post</strong>: Multiple comments can belong to one post</li>
 *   <li><strong>Lazy Loading</strong>: Post data is loaded only when accessed</li>
 *   <li><strong>Foreign Key Relationship</strong>: Uses post_id column to reference posts</li>
 *   <li><strong>Bidirectional Relationship</strong>: The Post entity has a @OneToMany relationship back to comments</li>
 * </ul>
 * 
 * <p>The Comment entity will be stored in a database table with the following structure:</p>
 * <ul>
 *   <li>id (BIGINT, PRIMARY KEY, AUTO_INCREMENT)</li>
 *   <li>text (TEXT)</li>
 *   <li>post_id (BIGINT, FOREIGN KEY to post table)</li>
 * </ul>
 * 
 * <p>Key JPA concepts demonstrated:</p>
 * <ul>
 *   <li><strong>Lazy Loading</strong>: Post is loaded only when accessed, improving performance</li>
 *   <li><strong>Foreign Key Mapping</strong>: Explicit column naming with @JoinColumn</li>
 *   <li><strong>Relationship Management</strong>: Proper setup of many-to-one relationships</li>
 *   <li><strong>Performance Optimization</strong>: Lazy loading prevents unnecessary data loading</li>
 * </ul>
 * 
 * <p>This entity is used throughout the application to represent comments on posts,
 * providing a way for users to interact with blog posts.</p>
 * 
 * @author Tutorial Application
 * @version 1.0
 * @since Spring Boot 3.x
 * @see Post
 * @see jakarta.persistence.ManyToOne
 * @see jakarta.persistence.JoinColumn
 */
@Entity
public class Comment {
    
    /**
     * The unique identifier for the comment.
     * 
     * <p>This field demonstrates JPA primary key configuration:</p>
     * <ul>
     *   <li><strong>@Id</strong>: Marks this field as the primary key of the entity</li>
     *   <li><strong>@GeneratedValue(strategy = GenerationType.IDENTITY)</strong>: Specifies that the database
     *       should automatically generate this value using an auto-increment strategy</li>
     * </ul>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The text content of the comment.
     * 
     * <p>This field will be mapped to a database column named "text" and is typically
     * stored as TEXT to accommodate longer comment content.</p>
     */
    private String text;

    /**
     * The post that this comment belongs to.
     * 
     * <p>This field demonstrates a many-to-one relationship with Post entities:</p>
     * <ul>
     *   <li><strong>@ManyToOne(fetch = FetchType.LAZY)</strong>: Establishes a many-to-one relationship
     *       where many comments can belong to one post. The LAZY fetch type means the post data
     *       will only be loaded when explicitly accessed, not when the comment is initially loaded.</li>
     *   <li><strong>@JoinColumn(name = "post_id")</strong>: Specifies the name of the foreign key column
     *       in the comment table that references the post table. This creates a column named "post_id"
     *       that contains the ID of the associated post.</li>
     * </ul>
     * 
     * <p>Benefits of lazy loading:</p>
     * <ul>
     *   <li><strong>Performance</strong>: Avoids loading unnecessary data when comments are loaded without post details</li>
     *   <li><strong>Memory efficiency</strong>: Reduces memory usage when working with large numbers of comments</li>
     *   <li><strong>Selective loading</strong>: Post data is loaded only when getPost() is called</li>
     * </ul>
     * 
     * <p>Note: When using lazy loading, the post must be accessed within a transaction
     * to avoid LazyInitializationException.</p>
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "post_id")
    private Post post;

    /**
     * Gets the ID of the comment.
     * 
     * @return The comment's unique identifier
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the ID of the comment.
     * 
     * <p>Note: In most cases, you won't need to set the ID manually as it's
     * generated by the database. This method exists mainly for framework use and testing.</p>
     * 
     * @param id The comment's unique identifier
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the text content of the comment.
     * 
     * @return The comment's text content
     */
    public String getText() {
        return text;
    }

    /**
     * Sets the text content of the comment.
     * 
     * @param text The text content to set
     */
    public void setText(String text) {
        this.text = text;
    }

    /**
     * Gets the post that this comment belongs to.
     * 
     * <p>Note: Due to the FetchType.LAZY setting, this method might trigger
     * a database query when called if the post hasn't been loaded yet. This is
     * called lazy loading and is a performance optimization.</p>
     * 
     * <p>Important considerations:</p>
     * <ul>
     *   <li><strong>Transaction context</strong>: The post must be accessed within a transaction</li>
     *   <li><strong>Performance impact</strong>: Accessing this method may trigger a database query</li>
     *   <li><strong>Exception handling</strong>: May throw LazyInitializationException if accessed outside a transaction</li>
     * </ul>
     * 
     * @return The post this comment belongs to
     */
    public Post getPost() {
        return post;
    }

    /**
     * Sets the post that this comment belongs to.
     * 
     * <p>This method establishes the many-to-one relationship between this comment and
     * the specified post. When this comment is saved, it will be associated
     * with the given post in the database.</p>
     * 
     * @param post The post to associate this comment with
     */
    public void setPost(Post post) {
        this.post = post;
    }
}
