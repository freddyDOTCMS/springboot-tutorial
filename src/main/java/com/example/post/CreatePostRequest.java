package com.example.post;

/**
 * Data Transfer Object (DTO) for creating new posts.
 * 
 * <p>This class demonstrates the DTO pattern for complex entity creation with relationships:</p>
 * <ul>
 *   <li><strong>Input DTO</strong>: This class represents the data structure for creating new posts.
 *       It contains only the fields that are needed for the creation operation.</li>
 *   <li><strong>Relationship handling</strong>: Uses authorId to reference an existing author rather than
 *       embedding the entire author object, following proper API design principles.</li>
 *   <li><strong>JSON Deserialization</strong>: When a POST request is made to create a post, Spring
 *       will automatically deserialize the JSON request body into an instance of this class.</li>
 *   <li><strong>Validation boundary</strong>: This class can be used as a boundary for input validation,
 *       ensuring that only valid data reaches the service layer.</li>
 * </ul>
 * 
 * <p>Key characteristics of this DTO:</p>
 * <ul>
 *   <li><strong>No ID field</strong>: The ID is generated by the database, so it's not included in the request</li>
 *   <li><strong>Author reference</strong>: Uses authorId to reference an existing author instead of embedding author data</li>
 *   <li><strong>JavaBean convention</strong>: Follows the JavaBean pattern with private fields and public getters/setters</li>
 *   <li><strong>Complete post data</strong>: Contains all necessary fields for post creation (title, content, excerpt)</li>
 *   <li><strong>API contract</strong>: Defines the expected structure of JSON requests for creating posts</li>
 * </ul>
 * 
 * <p>Example JSON request body:</p>
 * <pre>
 * {
 *   "title": "My First Blog Post",
 *   "content": "This is the content of my first blog post. It can be quite long and contain multiple paragraphs.",
 *   "excerpt": "A brief summary of the post content",
 *   "authorId": 123
 * }
 * </pre>
 * 
 * <p>This DTO is used in the PostController's createPost method and is converted to a Post entity
 * by the PostMapper after the author is validated and retrieved by the service layer.</p>
 * 
 * <p>The design demonstrates proper separation of concerns where:</p>
 * <ul>
 *   <li>The DTO contains only the data needed for creation</li>
 *   <li>The service layer handles author validation and retrieval</li>
 *   <li>The mapper handles the conversion to the entity</li>
 * </ul>
 * 
 * @author Tutorial Application
 * @version 1.0
 * @since Spring Boot 3.x
 * @see PostController#createPost(CreatePostRequest)
 * @see PostMapper#toEntity(CreatePostRequest, Author)
 * @see PostService#save(CreatePostRequest)
 */
public class CreatePostRequest {

    /**
     * The title of the post to be created.
     * 
     * <p>This field will be automatically populated from the JSON request body
     * when Spring deserializes the HTTP request.</p>
     */
    private String title;
    
    /**
     * The main content of the post to be created.
     * 
     * <p>This field will be automatically populated from the JSON request body
     * when Spring deserializes the HTTP request. The content can be quite long
     * and contain multiple paragraphs.</p>
     */
    private String content;
    
    /**
     * A short summary or preview of the post content.
     * 
     * <p>This field will be automatically populated from the JSON request body
     * when Spring deserializes the HTTP request. The excerpt is used for
     * displaying post previews without loading the full content.</p>
     */
    private String excerpt;
    
    /**
     * The unique identifier of the author who will write the post.
     * 
     * <p>This field demonstrates proper relationship handling in DTOs:</p>
     * <ul>
     *   <li><strong>Reference by ID</strong>: Uses the author's ID instead of embedding the entire author object</li>
     *   <li><strong>Validation boundary</strong>: The service layer will validate that this author exists</li>
     *   <li><strong>Clean API design</strong>: Keeps the request structure simple and focused</li>
     * </ul>
     * 
     * <p>This field will be automatically populated from the JSON request body
     * when Spring deserializes the HTTP request.</p>
     */
    private Long authorId;

    /**
     * Gets the title of the post.
     * 
     * @return The post's title
     */
    public String getTitle() {
        return title;
    }

    /**
     * Sets the title of the post.
     * 
     * <p>This setter is called by Spring during JSON deserialization to populate
     * the field from the request body.</p>
     * 
     * @param title The post's title
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Gets the content of the post.
     * 
     * @return The post's content
     */
    public String getContent() {
        return content;
    }

    /**
     * Sets the content of the post.
     * 
     * <p>This setter is called by Spring during JSON deserialization to populate
     * the field from the request body.</p>
     * 
     * @param content The post's content
     */
    public void setContent(String content) {
        this.content = content;
    }

    /**
     * Gets the excerpt of the post.
     * 
     * @return The post's excerpt
     */
    public String getExcerpt() {
        return excerpt;
    }

    /**
     * Sets the excerpt of the post.
     * 
     * <p>This setter is called by Spring during JSON deserialization to populate
     * the field from the request body.</p>
     * 
     * @param excerpt The post's excerpt
     */
    public void setExcerpt(String excerpt) {
        this.excerpt = excerpt;
    }

    /**
     * Gets the author ID for the post.
     * 
     * @return The author's ID
     */
    public Long getAuthorId() {
        return authorId;
    }

    /**
     * Sets the author ID for the post.
     * 
     * <p>This setter is called by Spring during JSON deserialization to populate
     * the field from the request body. The service layer will use this ID to
     * retrieve and validate the author before creating the post.</p>
     * 
     * @param authorId The author's ID
     */
    public void setAuthorId(Long authorId) {
        this.authorId = authorId;
    }
}
