package com.example.author;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

/**
 * JPA entity class representing an Author in the tutorial application.
 * 
 * <p>This class demonstrates fundamental JPA (Java Persistence API) concepts in Spring Boot:</p>
 * <ul>
 *   <li><strong>@Entity</strong>: This annotation marks the class as a JPA entity, meaning it will be mapped to a database table.
 *       By default, the table name will be the same as the class name (in lowercase). Spring Boot will automatically
 *       create the table in the database when the application starts.</li>
 *   <li><strong>@Id</strong>: Marks a field as the primary key of the entity. Every JPA entity must have a primary key.</li>
 *   <li><strong>@GeneratedValue</strong>: Specifies how the primary key should be generated. In this case, we use
 *       GenerationType.IDENTITY which relies on the database's auto-increment feature.</li>
 * </ul>
 * 
 * <p>Key JPA concepts demonstrated:</p>
 * <ul>
 *   <li><strong>Entity Mapping</strong>: How to map Java classes to database tables</li>
 *   <li><strong>Primary Key Generation</strong>: Automatic ID generation strategies</li>
 *   <li><strong>JavaBean Convention</strong>: Private fields with public getters and setters</li>
 *   <li><strong>Database Schema</strong>: Automatic table creation by Spring Boot</li>
 * </ul>
 * 
 * <p>The Author entity will be stored in a database table with the following structure:</p>
 * <ul>
 *   <li>id (BIGINT, PRIMARY KEY, AUTO_INCREMENT)</li>
 *   <li>first_name (VARCHAR)</li>
 *   <li>last_name (VARCHAR)</li>
 *   <li>email (VARCHAR)</li>
 * </ul>
 * 
 * <p>This entity is used throughout the application to represent authors who can create posts.</p>
 * 
 * @author Tutorial Application
 * @version 1.0
 * @since Spring Boot 3.x
 * @see jakarta.persistence.Entity
 * @see jakarta.persistence.Id
 * @see jakarta.persistence.GeneratedValue
 */
@Entity
public class Author {

    /**
     * The unique identifier for the author.
     * 
     * <p>This field demonstrates JPA primary key configuration:</p>
     * <ul>
     *   <li><strong>@Id</strong>: Marks this field as the primary key of the entity. Every JPA entity must have exactly one primary key.</li>
     *   <li><strong>@GeneratedValue(strategy = GenerationType.IDENTITY)</strong>: Specifies that the database should automatically
     *       generate this value using an auto-increment strategy. This is the most common approach for primary keys.</li>
     * </ul>
     * 
     * <p>Other generation strategies include:</p>
     * <ul>
     *   <li>GenerationType.SEQUENCE: Uses database sequences</li>
     *   <li>GenerationType.TABLE: Uses a separate table to track IDs</li>
     *   <li>GenerationType.AUTO: Lets JPA choose the best strategy</li>
     * </ul>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The first name of the author.
     * 
     * <p>This field will be mapped to a database column named "first_name" (following JPA naming conventions).
     * No explicit annotation is needed as JPA will automatically map the field to a column.</p>
     */
    private String firstName;

    /**
     * The last name of the author.
     * 
     * <p>This field will be mapped to a database column named "last_name".</p>
     */
    private String lastName;

    /**
     * The email address of the author.
     * 
     * <p>This field will be mapped to a database column named "email".</p>
     */
    private String email;

    /**
     * Gets the ID of the author.
     * 
     * <p>This getter method follows the JavaBean convention and allows JPA to access the private field.</p>
     * 
     * @return The author's unique identifier
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the ID of the author.
     * 
     * <p>This setter method follows the JavaBean convention and allows JPA to set the private field.
     * In most cases, you won't need to set the ID manually as it's generated by the database.
     * This method exists mainly for framework use and testing purposes.</p>
     * 
     * @param id The author's unique identifier
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the first name of the author.
     * 
     * @return The author's first name
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * Sets the first name of the author.
     * 
     * @param firstName The author's first name
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /**
     * Gets the last name of the author.
     * 
     * @return The author's last name
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * Sets the last name of the author.
     * 
     * @param lastName The author's last name
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    /**
     * Gets the email address of the author.
     * 
     * @return The author's email address
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets the email address of the author.
     * 
     * @param email The author's email address
     */
    public void setEmail(String email) {
        this.email = email;
    }
}
