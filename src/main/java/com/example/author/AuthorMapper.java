package com.example.author;


import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

/**
 * Mapper class for converting between Author entities and DTOs using MapStruct.
 * 
 * <p>This class demonstrates MapStruct mapping patterns in Spring Boot applications:</p>
 * <ul>
 *   <li><strong>@Mapper(componentModel = "spring")</strong>: This annotation tells MapStruct to generate
 *       a Spring component that can be injected into other components. The generated implementation
 *       will be automatically detected by Spring's component scanning.</li>
 *   <li><strong>Abstract class approach</strong>: MapStruct generates the implementation of this abstract class
 *       at compile time, providing type-safe mapping between objects.</li>
 *   <li><strong>Bidirectional mapping</strong>: Provides methods to convert from DTOs to entities and vice versa.</li>
 * </ul>
 * 
 * <p>Key benefits of using MapStruct:</p>
 * <ul>
 *   <li><strong>Type Safety</strong>: Compile-time checking of mapping configurations</li>
 *   <li><strong>Performance</strong>: Generated code is as fast as hand-written mapping</li>
 *   <li><strong>Maintainability</strong>: Centralized mapping logic that's easy to update</li>
 *   <li><strong>Flexibility</strong>: Supports custom mapping methods and expressions</li>
 * </ul>
 * 
 * <p>This mapper handles the transformation between:</p>
 * <ul>
 *   <li><strong>CreateAuthorRequest</strong>: Input DTO for creating authors</li>
 *   <li><strong>Author</strong>: JPA entity for database persistence</li>
 *   <li><strong>AuthorResponse</strong>: Output DTO for API responses</li>
 * </ul>
 * 
 * <p>The mapper ensures clean separation between the API layer (DTOs) and the domain layer (entities),
 * following the Data Transfer Object pattern.</p>
 * 
 * @author Tutorial Application
 * @version 1.0
 * @since Spring Boot 3.x
 * @see Author
 * @see CreateAuthorRequest
 * @see AuthorResponse
 */
@Mapper(componentModel = "spring")
public abstract class AuthorMapper {

    /**
     * Converts a CreateAuthorRequest DTO to an Author entity.
     * 
     * <p>This method demonstrates MapStruct mapping with field exclusion:</p>
     * <ul>
     *   <li><strong>@Mapping(target = "id", ignore = true)</strong>: Tells MapStruct to ignore the id field
     *       during mapping. This is necessary because the id is generated by the database and should not
     *       be set from the request DTO.</li>
     *   <li><strong>Automatic field mapping</strong>: MapStruct automatically maps fields with the same names
     *       (firstName, lastName, email) from the request to the entity.</li>
     * </ul>
     * 
     * <p>This method is used when creating new authors, where the ID should be generated by the database.</p>
     * 
     * @param request The CreateAuthorRequest DTO containing author data
     * @return An Author entity with the data from the request (excluding ID)
     */
    @Mapping(target = "id", ignore = true)
    public abstract Author toEntity(CreateAuthorRequest request);

    /**
     * Converts an Author entity to an AuthorResponse DTO.
     * 
     * <p>This method demonstrates MapStruct mapping with custom expressions:</p>
     * <ul>
     *   <li><strong>@Mapping(expression = "java(getFullName(author))", target = "fullName")</strong>: 
     *       Uses a custom expression to compute the fullName field by calling the getFullName method.</li>
     *   <li><strong>Automatic field mapping</strong>: MapStruct automatically maps fields with the same names
     *       (id, firstName, lastName, email) from the entity to the response DTO.</li>
     * </ul>
     * 
     * <p>This method is used when returning author data to clients, providing a computed fullName
     * field for convenience.</p>
     * 
     * @param author The Author entity to convert
     * @return An AuthorResponse DTO with the entity data plus computed fullName
     */
    @Mapping(expression = "java(getFullName(author))", target = "fullName")
    public abstract AuthorResponse toDto(Author author);

    /**
     * Computes the full name of an author by combining first and last names.
     * 
     * <p>This method is used by the MapStruct mapping expression to compute the fullName field
     * in the AuthorResponse DTO. It demonstrates how to add computed fields to DTOs.</p>
     * 
     * @param author The Author entity
     * @return The full name as a concatenated string
     */
    protected String getFullName(Author author) {
        return author.getFirstName() + " " + author.getLastName();
    }
}
